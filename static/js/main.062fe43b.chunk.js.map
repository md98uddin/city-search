{"version":3,"sources":["components/Navbar.jsx","components/SortOptions.jsx","components/CityInput.jsx","components/ZipCard.jsx","components/StatesCity.jsx","services.js","components/CityDetail.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","title","city","zips","className","style","textAlign","backgroundColor","href","color","letterSpacing","textDecoration","fontSize","marginRight","marginLeft","length","SortOptions","view","onSelect","value","onChange","CityInput","onSubmit","marginTop","placeholder","id","height","onClick","e","marginBottom","ZipCard","overflowY","map","zip","index","key","fontWeight","StatesCity","states","toUpperCase","join","statesWithCity","arr","i","axios","get","then","res","data","includes","State","push","cityDetails","Zipcode","City","Lat","Long","EstimatedPopulation","TotalWages","CityDetails","cities","class","width","substring","App","props","handleChange","setState","target","handleSelect","onSubmitCity","a","state","fetchZips","Axios","catch","error","this","Fragment","CityDetail","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.062fe43b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nconst Navbar = ({ title, city, zips }) => {\r\n  return (\r\n    <nav\r\n      className=\"navbar navbar-light\"\r\n      style={{ textAlign: \"center\", backgroundColor: \"black\" }}\r\n    >\r\n      <a\r\n        className=\"navbar-brand\"\r\n        href=\"#\"\r\n        style={{\r\n          color: \"white\",\r\n          letterSpacing: 2,\r\n          textDecoration: \"none\",\r\n        }}\r\n      >\r\n        {title}\r\n      </a>\r\n      <p\r\n        style={{\r\n          color: \"white\",\r\n          fontSize: 17,\r\n          marginRight: \"1%\",\r\n        }}\r\n      >\r\n        City {city && city}\r\n        <span style={{ marginLeft: 50 }}>\r\n          Matches {zips && zips !== \"no result\" && zips.length}\r\n        </span>\r\n      </p>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\n\r\nconst SortOptions = ({ view, onSelect }) => {\r\n  return (\r\n    <select value={view} onChange={onSelect} style={{ marginLeft: \"1.5vw\" }}>\r\n      <option value=\"all\">all zips</option>\r\n      <option value=\"states\">states with city</option>\r\n      <option value=\"details\">details of city</option>\r\n    </select>\r\n  );\r\n};\r\n\r\nexport default SortOptions;\r\n","import React from \"react\";\r\nimport SortOptions from \"./SortOptions\";\r\n\r\nconst CityInput = ({ onChange, onSubmit, view, onSelect }) => {\r\n  return (\r\n    <div className=\"input-form\" style={{ marginLeft: \"38%\", marginTop: \"2vh\" }}>\r\n      <label style={{ marginRight: 5 }}>City Name</label>\r\n      <input\r\n        placeholder=\"Type in a city\"\r\n        onChange={onChange}\r\n        id=\"city\"\r\n        style={{\r\n          height: 40,\r\n        }}\r\n      />\r\n      <button\r\n        className=\"btn btn-primary\"\r\n        onClick={(e) => onSubmit(e)}\r\n        style={{ marginLeft: 5, height: 40, marginBottom: 5 }}\r\n      >\r\n        Search\r\n      </button>\r\n      <SortOptions view={view} onSelect={onSelect} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CityInput;\r\n","import React from \"react\";\r\n\r\nconst ZipCard = ({ zips, view }) => {\r\n  return (\r\n    view === \"all\" && (\r\n      <div className=\"container\" style={{ textAlign: \"center\" }}>\r\n        {zips && (\r\n          <div\r\n            className=\"card\"\r\n            style={{\r\n              textAlign: \"center\",\r\n              height: \"500px\",\r\n              overflowY: \"scroll\",\r\n            }}\r\n          >\r\n            <h5 className=\"card-header\">All Zips in City</h5>\r\n            <div className=\"card-body\">\r\n              {zips.map((zip, index) => (\r\n                <p className=\"card-text\" key={zip}>\r\n                  {index + 1}:<p style={{ fontWeight: \"bold\" }}>{zip}</p>\r\n                </p>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    )\r\n  );\r\n};\r\n\r\nexport default ZipCard;\r\n","import React from \"react\";\r\n\r\nconst StatesCity = ({ states, view, city }) => {\r\n  return view === \"states\" ? (\r\n    <div className=\"container card\" style={{ textAlign: \"center\" }}>\r\n      <div className=\"card-body\">\r\n        <h5 className=\"card-title\">\r\n          States with a city named {city ? city.toUpperCase() : \"None\"}\r\n        </h5>\r\n        <p>{states.join(\" | \")}</p>\r\n      </div>\r\n    </div>\r\n  ) : null;\r\n};\r\n\r\nexport default StatesCity;\r\n","import axios from \"axios\";\r\n\r\n//get states with the provided city name\r\nexport function statesWithCity(arr) {\r\n  var states = [];\r\n\r\n  //check if arr is not null\r\n  if (arr) {\r\n    //call api for each zip in arr and check first index state value\r\n    for (let i = 0; i < arr.length; i++) {\r\n      axios\r\n        .get(`https://ctp-zip-api.herokuapp.com/zip/${arr[i]}`)\r\n        .then((res) => {\r\n          if (res.data) {\r\n            //if it not in array already, add to state arr\r\n            if (!states.includes(res.data[0].State))\r\n              states.push(res.data[0].State);\r\n          }\r\n        });\r\n    }\r\n  }\r\n  return states;\r\n}\r\n\r\n//enumerate city details for each zip\r\nexport function cityDetails(arr) {\r\n  var city = [];\r\n\r\n  //check if arr is not null\r\n  if (arr) {\r\n    //run api for each zip and get the info properties\r\n    for (let i = 0; i < arr.length; i++) {\r\n      axios\r\n        .get(`https://ctp-zip-api.herokuapp.com/zip/${arr[i]}`)\r\n        .then((res) => {\r\n          //if success, push formatted description\r\n          if (res.data) {\r\n            const {\r\n              Zipcode,\r\n              City,\r\n              Lat,\r\n              Long,\r\n              EstimatedPopulation,\r\n              TotalWages,\r\n            } = res.data[0];\r\n            city.push(\r\n              `${Zipcode}, ${City}, (${Lat} , ${Long}), ${\r\n                EstimatedPopulation\r\n                  ? EstimatedPopulation + \" pop\"\r\n                  : \" Population Not Reported\"\r\n              }, ${TotalWages ? \"$\" + TotalWages : \" Wages Not Reported\"}`\r\n            );\r\n          }\r\n        });\r\n    }\r\n  }\r\n\r\n  return city;\r\n}\r\n","import React from \"react\";\r\n\r\nconst CityDetails = ({ cities, view }) => {\r\n  return (\r\n    view === \"details\" && (\r\n      <div\r\n        className=\"container\"\r\n        style={{ textAlign: \"center\", height: \"500px\", overflowY: \"scroll\" }}\r\n      >\r\n        <p style={{ marginLeft: \"120px\" }}>\r\n          Zip Details Order | City, Geolocation, Population, Total Wages{\" \"}\r\n        </p>\r\n        {cities &&\r\n          cities.map((city) => (\r\n            <div\r\n              class=\"card\"\r\n              style={{\r\n                fontWeight: \"bolder\",\r\n                width: \"40rem\",\r\n                textAlign: \"center\",\r\n                marginLeft: \"30%\",\r\n              }}\r\n            >\r\n              <div className=\"card-body\">\r\n                <h5 className=\"card-title\" style={{ fontSize: 25 }}>\r\n                  Zip: {city.substring(0, 5)}\r\n                </h5>\r\n                <p className=\"card-text\">{city.substring(6)}</p>\r\n                <p>-----------------------------------------</p>\r\n              </div>\r\n            </div>\r\n          ))}\r\n      </div>\r\n    )\r\n  );\r\n};\r\n\r\nexport default CityDetails;\r\n","import React, { Component } from \"react\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport CityInput from \"./components/CityInput\";\r\nimport ZipCard from \"./components/ZipCard\";\r\nimport Axios from \"axios\";\r\nimport StatesCity from \"./components/StatesCity\";\r\nimport { statesWithCity, cityDetails } from \"./services\";\r\nimport CityDetails from \"./components/CityDetail\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      zips: null,\r\n      city: null,\r\n      states: null,\r\n      cities: null,\r\n      view: \"all\",\r\n    };\r\n  }\r\n\r\n  //on load call api if city was provided\r\n  async componentDidMount() {\r\n    if (this.state.city) {\r\n      return this.fetchZips(this.state.city.toUpperCase());\r\n    }\r\n  }\r\n\r\n  //handle and set city input field\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.target.id]: e.target.value,\r\n    });\r\n  };\r\n\r\n  //handle and set sort options\r\n  handleSelect = (e) => {\r\n    this.setState({\r\n      view: e.target.value,\r\n    });\r\n  };\r\n\r\n  //onsubmit, call api if city is not null\r\n  onSubmitCity = async (e) => {\r\n    this.setState({\r\n      view: \"all\",\r\n    });\r\n    if (this.state.city) return this.fetchZips(this.state.city.toUpperCase());\r\n  };\r\n\r\n  //call api with passed city parameter\r\n  fetchZips = (city) => {\r\n    Axios.get(`https://ctp-zip-api.herokuapp.com/city/${city}`)\r\n      .then((res) => {\r\n        //on success, set state\r\n        if (res.data)\r\n          this.setState({\r\n            zips: res.data,\r\n            states: statesWithCity(res.data),\r\n            cities: cityDetails(res.data),\r\n          });\r\n      })\r\n      .catch((error) => {\r\n        //if error, set error states\r\n        this.setState({\r\n          zips: [\"NO RESULT\"],\r\n          states: [\"NO RESULT\"],\r\n          cities: null,\r\n        });\r\n      });\r\n  };\r\n\r\n  render() {\r\n    const { zips, city, view, states, cities } = this.state;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Navbar title=\"CitySearch\" zips={zips} city={city} />\r\n        <CityInput\r\n          onChange={this.handleChange}\r\n          onSubmit={this.onSubmitCity}\r\n          view={view}\r\n          onSelect={this.handleSelect}\r\n        />\r\n        <ZipCard zips={this.state.zips} view={view} />\r\n        <StatesCity states={states} view={view} city={city} />\r\n        <CityDetails cities={cities} view={view} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}